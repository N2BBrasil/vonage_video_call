// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is VonageVideoCallError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class VonageVideoCallError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class ConnectionState(val raw: Int) {
  DISCONNECTED(0),
  CONNECTING(1),
  WAITING(2),
  ON_CALL(3);

  companion object {
    fun ofRaw(raw: Int): ConnectionState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AudioOutputDevice(val raw: Int) {
  SPEAKER(0),
  HEADPHONE(1),
  BLUETOOTH(2),
  RECEIVER(3);

  companion object {
    fun ofRaw(raw: Int): AudioOutputDevice? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AudioOutputDeviceCallback (
  val type: AudioOutputDevice,
  val name: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AudioOutputDeviceCallback {
      val type = AudioOutputDevice.ofRaw(list[0] as Int)!!
      val name = list[1] as String
      return AudioOutputDeviceCallback(type, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type.raw,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ConnectionCallback (
  val state: ConnectionState

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ConnectionCallback {
      val state = ConnectionState.ofRaw(list[0] as Int)!!
      return ConnectionCallback(state)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      state.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SessionConfig (
  val id: String,
  val apiKey: String,
  val token: String,
  val audioInitiallyEnabled: Boolean,
  val videoInitiallyEnabled: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SessionConfig {
      val id = list[0] as String
      val apiKey = list[1] as String
      val token = list[2] as String
      val audioInitiallyEnabled = list[3] as Boolean
      val videoInitiallyEnabled = list[4] as Boolean
      return SessionConfig(id, apiKey, token, audioInitiallyEnabled, videoInitiallyEnabled)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      apiKey,
      token,
      audioInitiallyEnabled,
      videoInitiallyEnabled,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object VonageVideoCallHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AudioOutputDeviceCallback.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SessionConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AudioOutputDeviceCallback -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is SessionConfig -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface VonageVideoCallHostApi {
  fun initSession(config: SessionConfig)
  fun endSession()
  fun switchCamera()
  fun toggleAudio(enabled: Boolean)
  fun toggleVideo(enabled: Boolean)
  fun listAvailableOutputDevices(): List<AudioOutputDeviceCallback>
  fun setOutputDevice(deviceName: String)
  fun subscriberVideoIsEnabled(): Boolean

  companion object {
    /** The codec used by VonageVideoCallHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      VonageVideoCallHostApiCodec
    }
    /** Sets up an instance of `VonageVideoCallHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: VonageVideoCallHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.initSession", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as SessionConfig
            var wrapped: List<Any?>
            try {
              api.initSession(configArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.endSession", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.endSession()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.switchCamera", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.switchCamera()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.toggleAudio", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.toggleAudio(enabledArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.toggleVideo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.toggleVideo(enabledArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.listAvailableOutputDevices", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.listAvailableOutputDevices())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.setOutputDevice", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceNameArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.setOutputDevice(deviceNameArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.subscriberVideoIsEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.subscriberVideoIsEnabled())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object VonageVideoCallPlatformApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AudioOutputDeviceCallback.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ConnectionCallback.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AudioOutputDeviceCallback -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is ConnectionCallback -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class VonageVideoCallPlatformApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by VonageVideoCallPlatformApi. */
    val codec: MessageCodec<Any?> by lazy {
      VonageVideoCallPlatformApiCodec
    }
  }
  fun onSessionConnected(connectionIdArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSessionConnected", codec)
    channel.send(listOf(connectionIdArg)) {
      callback()
    }
  }
  fun onConnectionStateChanges(connectionArg: ConnectionCallback, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onConnectionStateChanges", codec)
    channel.send(listOf(connectionArg)) {
      callback()
    }
  }
  fun onAudioOutputDeviceChange(outputDeviceArg: AudioOutputDeviceCallback, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onAudioOutputDeviceChange", codec)
    channel.send(listOf(outputDeviceArg)) {
      callback()
    }
  }
  fun onSubscriberConnectionChanges(connectedArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberConnectionChanges", codec)
    channel.send(listOf(connectedArg)) {
      callback()
    }
  }
  fun onSubscriberVideoChanges(enabledArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberVideoChanges", codec)
    channel.send(listOf(enabledArg)) {
      callback()
    }
  }
  fun onError(errorArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onError", codec)
    channel.send(listOf(errorArg)) {
      callback()
    }
  }
}
