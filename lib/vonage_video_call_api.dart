// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum ConnectionState {
  disconnected,
  connecting,
  waiting,
  on_call,
}

enum AudioOutputDevice {
  speaker,
  headphone,
  bluetooth,
  receiver,
}

class AudioOutputDeviceCallback {
  AudioOutputDeviceCallback({
    required this.type,
    required this.name,
  });

  AudioOutputDevice type;

  String name;

  Object encode() {
    return <Object?>[
      type.index,
      name,
    ];
  }

  static AudioOutputDeviceCallback decode(Object result) {
    result as List<Object?>;
    return AudioOutputDeviceCallback(
      type: AudioOutputDevice.values[result[0]! as int],
      name: result[1]! as String,
    );
  }
}

class ConnectionCallback {
  ConnectionCallback({
    required this.state,
  });

  ConnectionState state;

  Object encode() {
    return <Object?>[
      state.index,
    ];
  }

  static ConnectionCallback decode(Object result) {
    result as List<Object?>;
    return ConnectionCallback(
      state: ConnectionState.values[result[0]! as int],
    );
  }
}

class SessionConfig {
  SessionConfig({
    required this.id,
    required this.apiKey,
    required this.token,
    required this.audioInitiallyEnabled,
    required this.videoInitiallyEnabled,
  });

  String id;

  String apiKey;

  String token;

  bool audioInitiallyEnabled;

  bool videoInitiallyEnabled;

  Object encode() {
    return <Object?>[
      id,
      apiKey,
      token,
      audioInitiallyEnabled,
      videoInitiallyEnabled,
    ];
  }

  static SessionConfig decode(Object result) {
    result as List<Object?>;
    return SessionConfig(
      id: result[0]! as String,
      apiKey: result[1]! as String,
      token: result[2]! as String,
      audioInitiallyEnabled: result[3]! as bool,
      videoInitiallyEnabled: result[4]! as bool,
    );
  }
}

class _VonageVideoCallHostApiCodec extends StandardMessageCodec {
  const _VonageVideoCallHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AudioOutputDeviceCallback) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is SessionConfig) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AudioOutputDeviceCallback.decode(readValue(buffer)!);
      case 129: 
        return SessionConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class VonageVideoCallHostApi {
  /// Constructor for [VonageVideoCallHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  VonageVideoCallHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _VonageVideoCallHostApiCodec();

  Future<void> initSession(SessionConfig arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.initSession', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_config]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> endSession() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.endSession', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> switchCamera() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.switchCamera', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> toggleAudio(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.toggleAudio', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> toggleVideo(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.toggleVideo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<AudioOutputDeviceCallback?>> listAvailableOutputDevices() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.listAvailableOutputDevices', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<AudioOutputDeviceCallback?>();
    }
  }

  Future<void> setOutputDevice(String arg_deviceName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.setOutputDevice', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_deviceName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> subscriberVideoIsEnabled() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.subscriberVideoIsEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}

class _VonageVideoCallPlatformApiCodec extends StandardMessageCodec {
  const _VonageVideoCallPlatformApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AudioOutputDeviceCallback) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ConnectionCallback) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AudioOutputDeviceCallback.decode(readValue(buffer)!);
      case 129: 
        return ConnectionCallback.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class VonageVideoCallPlatformApi {
  static const MessageCodec<Object?> codec = _VonageVideoCallPlatformApiCodec();

  void onSessionConnected(String connectionId);

  void onConnectionStateChanges(ConnectionCallback connection);

  void onAudioOutputDeviceChange(AudioOutputDeviceCallback outputDevice);

  void onSubscriberConnectionChanges(bool connected);

  void onSubscriberVideoChanges(bool enabled);

  void onError(String error);

  static void setup(VonageVideoCallPlatformApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSessionConnected', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSessionConnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_connectionId = (args[0] as String?);
          assert(arg_connectionId != null,
              'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSessionConnected was null, expected non-null String.');
          api.onSessionConnected(arg_connectionId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onConnectionStateChanges', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onConnectionStateChanges was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConnectionCallback? arg_connection = (args[0] as ConnectionCallback?);
          assert(arg_connection != null,
              'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onConnectionStateChanges was null, expected non-null ConnectionCallback.');
          api.onConnectionStateChanges(arg_connection!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onAudioOutputDeviceChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onAudioOutputDeviceChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AudioOutputDeviceCallback? arg_outputDevice = (args[0] as AudioOutputDeviceCallback?);
          assert(arg_outputDevice != null,
              'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onAudioOutputDeviceChange was null, expected non-null AudioOutputDeviceCallback.');
          api.onAudioOutputDeviceChange(arg_outputDevice!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberConnectionChanges', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberConnectionChanges was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_connected = (args[0] as bool?);
          assert(arg_connected != null,
              'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberConnectionChanges was null, expected non-null bool.');
          api.onSubscriberConnectionChanges(arg_connected!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberVideoChanges', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberVideoChanges was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_enabled = (args[0] as bool?);
          assert(arg_enabled != null,
              'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberVideoChanges was null, expected non-null bool.');
          api.onSubscriberVideoChanges(arg_enabled!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onError', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onError was null, expected non-null String.');
          api.onError(arg_error!);
          return;
        });
      }
    }
  }
}
