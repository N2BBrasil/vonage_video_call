// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ConnectionState: Int {
  case disconnected = 0
  case connecting = 1
  case waiting = 2
  case onCall = 3
}

enum AudioOutputDevice: Int {
  case speaker = 0
  case headphone = 1
  case bluetooth = 2
  case receiver = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct AudioOutputDeviceCallback {
  var type: AudioOutputDevice
  var name: String

  static func fromList(_ list: [Any?]) -> AudioOutputDeviceCallback? {
    let type = AudioOutputDevice(rawValue: list[0] as! Int)!
    let name = list[1] as! String

    return AudioOutputDeviceCallback(
      type: type,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      type.rawValue,
      name,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ConnectionCallback {
  var state: ConnectionState

  static func fromList(_ list: [Any?]) -> ConnectionCallback? {
    let state = ConnectionState(rawValue: list[0] as! Int)!

    return ConnectionCallback(
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      state.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SessionConfig {
  var id: String
  var apiKey: String
  var token: String
  var audioInitiallyEnabled: Bool
  var videoInitiallyEnabled: Bool

  static func fromList(_ list: [Any?]) -> SessionConfig? {
    let id = list[0] as! String
    let apiKey = list[1] as! String
    let token = list[2] as! String
    let audioInitiallyEnabled = list[3] as! Bool
    let videoInitiallyEnabled = list[4] as! Bool

    return SessionConfig(
      id: id,
      apiKey: apiKey,
      token: token,
      audioInitiallyEnabled: audioInitiallyEnabled,
      videoInitiallyEnabled: videoInitiallyEnabled
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      apiKey,
      token,
      audioInitiallyEnabled,
      videoInitiallyEnabled,
    ]
  }
}
private class VonageVideoCallHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AudioOutputDeviceCallback.fromList(self.readValue() as! [Any?])
      case 129:
        return SessionConfig.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class VonageVideoCallHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AudioOutputDeviceCallback {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? SessionConfig {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class VonageVideoCallHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return VonageVideoCallHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return VonageVideoCallHostApiCodecWriter(data: data)
  }
}

class VonageVideoCallHostApiCodec: FlutterStandardMessageCodec {
  static let shared = VonageVideoCallHostApiCodec(readerWriter: VonageVideoCallHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol VonageVideoCallHostApi {
  func initSession(config: SessionConfig) throws
  func endSession() throws
  func switchCamera() throws
  func toggleAudio(enabled: Bool) throws
  func toggleVideo(enabled: Bool) throws
  func listAvailableOutputDevices() throws -> [AudioOutputDeviceCallback]
  func setOutputDevice(deviceName: String) throws
  func subscriberVideoIsEnabled() throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class VonageVideoCallHostApiSetup {
  /// The codec used by VonageVideoCallHostApi.
  static var codec: FlutterStandardMessageCodec { VonageVideoCallHostApiCodec.shared }
  /// Sets up an instance of `VonageVideoCallHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: VonageVideoCallHostApi?) {
    let initSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.initSession", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! SessionConfig
        do {
          try api.initSession(config: configArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initSessionChannel.setMessageHandler(nil)
    }
    let endSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.endSession", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      endSessionChannel.setMessageHandler { _, reply in
        do {
          try api.endSession()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      endSessionChannel.setMessageHandler(nil)
    }
    let switchCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.switchCamera", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      switchCameraChannel.setMessageHandler { _, reply in
        do {
          try api.switchCamera()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      switchCameraChannel.setMessageHandler(nil)
    }
    let toggleAudioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.toggleAudio", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      toggleAudioChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.toggleAudio(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      toggleAudioChannel.setMessageHandler(nil)
    }
    let toggleVideoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.toggleVideo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      toggleVideoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.toggleVideo(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      toggleVideoChannel.setMessageHandler(nil)
    }
    let listAvailableOutputDevicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.listAvailableOutputDevices", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      listAvailableOutputDevicesChannel.setMessageHandler { _, reply in
        do {
          let result = try api.listAvailableOutputDevices()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      listAvailableOutputDevicesChannel.setMessageHandler(nil)
    }
    let setOutputDeviceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.setOutputDevice", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setOutputDeviceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceNameArg = args[0] as! String
        do {
          try api.setOutputDevice(deviceName: deviceNameArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setOutputDeviceChannel.setMessageHandler(nil)
    }
    let subscriberVideoIsEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallHostApi.subscriberVideoIsEnabled", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscriberVideoIsEnabledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.subscriberVideoIsEnabled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscriberVideoIsEnabledChannel.setMessageHandler(nil)
    }
  }
}
private class VonageVideoCallPlatformApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AudioOutputDeviceCallback.fromList(self.readValue() as! [Any?])
      case 129:
        return ConnectionCallback.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class VonageVideoCallPlatformApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AudioOutputDeviceCallback {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? ConnectionCallback {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class VonageVideoCallPlatformApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return VonageVideoCallPlatformApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return VonageVideoCallPlatformApiCodecWriter(data: data)
  }
}

class VonageVideoCallPlatformApiCodec: FlutterStandardMessageCodec {
  static let shared = VonageVideoCallPlatformApiCodec(readerWriter: VonageVideoCallPlatformApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class VonageVideoCallPlatformApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return VonageVideoCallPlatformApiCodec.shared
  }
  func onSessionConnected(connectionId connectionIdArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSessionConnected", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([connectionIdArg] as [Any?]) { _ in
      completion()
    }
  }
  func onConnectionStateChanges(connection connectionArg: ConnectionCallback, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onConnectionStateChanges", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([connectionArg] as [Any?]) { _ in
      completion()
    }
  }
  func onAudioOutputDeviceChange(outputDevice outputDeviceArg: AudioOutputDeviceCallback, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onAudioOutputDeviceChange", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([outputDeviceArg] as [Any?]) { _ in
      completion()
    }
  }
  func onSubscriberConnectionChanges(connected connectedArg: Bool, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberConnectionChanges", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([connectedArg] as [Any?]) { _ in
      completion()
    }
  }
  func onSubscriberVideoChanges(enabled enabledArg: Bool, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onSubscriberVideoChanges", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([enabledArg] as [Any?]) { _ in
      completion()
    }
  }
  func onError(error errorArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vonage_video_call_api.VonageVideoCallPlatformApi.onError", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { _ in
      completion()
    }
  }
}
